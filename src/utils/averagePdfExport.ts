import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface AverageCalculationData {
  entries: Array<{ price: number; weight: number }>;
  averagePrice: number;
  totalWeight: number;
  totalValue: number;
  createdAt: string;
}

export const exportAverageToPDF = (data: AverageCalculationData) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFillColor(239, 68, 68);
  doc.rect(0, 0, 210, 40, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text('Anar Calculator', 105, 20, { align: 'center' });
  doc.setFontSize(14);
  doc.text('Average Price Calculation Report', 105, 32, { align: 'center' });
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  
  let yPos = 50;
  
  // Report Info
  doc.setFontSize(10);
  doc.text(`Generated: ${new Date(data.createdAt).toLocaleString('en-IN')}`, 14, yPos);
  yPos += 10;
  
  // Summary Section
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text('Summary', 14, yPos);
  yPos += 8;
  
  const summaryData = [
    ['Total Entries', data.entries.length.toString()],
    ['Total Weight', `${data.totalWeight.toFixed(2)} kg`],
    ['Total Value', `₹${data.totalValue.toLocaleString('en-IN', { minimumFractionDigits: 2 })}`],
    ['Weighted Average Price', `₹${data.averagePrice.toFixed(2)} per kg`],
  ];
  
  autoTable(doc, {
    startY: yPos,
    head: [['Metric', 'Value']],
    body: summaryData,
    theme: 'grid',
    headStyles: { fillColor: [239, 68, 68] },
    margin: { left: 14, right: 14 },
  });
  
  yPos = (doc as any).lastAutoTable.finalY + 10;
  
  // Entry Details
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text('Entry Details', 14, yPos);
  yPos += 8;
  
  const entryRows = data.entries.map((entry, index) => [
    (index + 1).toString(),
    `₹${entry.price.toFixed(2)}`,
    `${entry.weight.toFixed(2)} kg`,
    `₹${(entry.price * entry.weight).toLocaleString('en-IN', { minimumFractionDigits: 2 })}`,
  ]);
  
  autoTable(doc, {
    startY: yPos,
    head: [['#', 'Price/kg', 'Weight', 'Total Value']],
    body: entryRows,
    theme: 'grid',
    headStyles: { fillColor: [239, 68, 68] },
    margin: { left: 14, right: 14 },
  });
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Anar Calculator`,
      105,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );
  }
  
  // Save
  const fileName = `average-calculation-${Date.now()}.pdf`;
  doc.save(fileName);
};
