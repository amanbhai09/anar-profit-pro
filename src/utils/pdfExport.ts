import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { CalculationResult } from '@/types/calculator';

export const exportCalculationToPDF = (calculation: CalculationResult) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(20);
  doc.setTextColor(40, 116, 240);
  doc.text('Anar Profit Calculator', 20, 20);
  
  doc.setFontSize(12);
  doc.setTextColor(100);
  doc.text('Professional Pomegranate Trading Report', 20, 28);
  
  // Date and basic info
  doc.setFontSize(10);
  doc.setTextColor(0);
  const date = new Date(calculation.timestamp).toLocaleDateString('en-IN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
  doc.text(`Generated on: ${date}`, 20, 40);
  
  // Contact Information
  let yPos = 50;
  doc.setFontSize(14);
  doc.setTextColor(40);
  doc.text('Transaction Details', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(10);
  doc.setTextColor(0);
  if (calculation.farmerName) {
    doc.text(`Farmer: ${calculation.farmerName}`, 20, yPos);
    yPos += 6;
  }
  if (calculation.farmerContact) {
    doc.text(`Farmer Contact: ${calculation.farmerContact}`, 20, yPos);
    yPos += 6;
  }
  if (calculation.buyerName) {
    doc.text(`Buyer: ${calculation.buyerName}`, 20, yPos);
    yPos += 6;
  }
  if (calculation.buyerContact) {
    doc.text(`Buyer Contact: ${calculation.buyerContact}`, 20, yPos);
    yPos += 6;
  }
  if (calculation.tripId) {
    doc.text(`Trip ID: ${calculation.tripId}`, 20, yPos);
    yPos += 6;
  }
  
  yPos += 10;
  
  // Grade Details Table
  doc.setFontSize(14);
  doc.setTextColor(40);
  doc.text('Grade Analysis', 20, yPos);
  yPos += 5;
  
  const gradeTableData = calculation.grades.map(grade => [
    grade.note || 'N/A',
    grade.boxes.toString(),
    `₹${grade.rate.toLocaleString('en-IN')}`,
    `₹${grade.gross.toLocaleString('en-IN')}`,
    `₹${(grade.profitPerBox || 0).toFixed(2)}`,
    `${(grade.marginPercent || 0).toFixed(1)}%`
  ]);
  
  autoTable(doc, {
    startY: yPos + 5,
    head: [['Grade', 'Boxes', 'Rate/Box', 'Gross', 'Profit/Box', 'Margin %']],
    body: gradeTableData,
    theme: 'grid',
    styles: { fontSize: 9, cellPadding: 3 },
    headStyles: { fillColor: [40, 116, 240], textColor: 255 },
    alternateRowStyles: { fillColor: [245, 247, 250] },
  });
  
  // Summary Section
  const finalY = (doc as any).autoTable.previous.finalY + 15;
  
  doc.setFontSize(14);
  doc.setTextColor(40);
  doc.text('Financial Summary', 20, finalY);
  
  const summaryData = [
    ['Total Boxes', calculation.totalBoxes.toLocaleString()],
    ['Gross Sale', `₹${calculation.grossSale.toLocaleString('en-IN')}`],
    ['Commission (%)', `${calculation.commission}%`],
    ['Commission Amount', `₹${calculation.commissionAmt.toLocaleString('en-IN')}`],
    ['Net Sale', `₹${calculation.netSale.toLocaleString('en-IN')}`],
    ['Total Cost', `₹${calculation.totalCost.toLocaleString('en-IN')}`],
    ['Final Profit/Loss', `₹${calculation.profit.toLocaleString('en-IN')}`],
  ];
  
  autoTable(doc, {
    startY: finalY + 5,
    body: summaryData,
    theme: 'plain',
    styles: { fontSize: 10, cellPadding: 2 },
    columnStyles: {
      0: { fontStyle: 'bold', cellWidth: 60 },
      1: { halign: 'right', cellWidth: 60 }
    },
  });
  
  // Cost Breakdown
  const costBreakdownY = (doc as any).autoTable.previous.finalY + 10;
  
  doc.setFontSize(12);
  doc.setTextColor(40);
  doc.text('Cost Breakdown', 20, costBreakdownY);
  
  const costData = [
    ['Transport Cost', `₹${calculation.totalTransportCost.toLocaleString('en-IN')}`],
    ['Packing Cost', `₹${calculation.totalPackingCost.toLocaleString('en-IN')}`],
    ['Labour Cost', `₹${calculation.totalLabourCost.toLocaleString('en-IN')}`],
    ['Miscellaneous', `₹${calculation.totalUtilityCost.toLocaleString('en-IN')}`],
  ];
  
  autoTable(doc, {
    startY: costBreakdownY + 5,
    body: costData,
    theme: 'plain',
    styles: { fontSize: 9, cellPadding: 2 },
    columnStyles: {
      0: { fontStyle: 'bold', cellWidth: 60 },
      1: { halign: 'right', cellWidth: 60 }
    },
  });
  
  // Notes
  if (calculation.notes) {
    const notesY = (doc as any).autoTable.previous.finalY + 10;
    doc.setFontSize(10);
    doc.setTextColor(40);
    doc.text('Notes:', 20, notesY);
    doc.setTextColor(0);
    const splitNotes = doc.splitTextToSize(calculation.notes, 170);
    doc.text(splitNotes, 20, notesY + 6);
  }
  
  // Footer
  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(8);
  doc.setTextColor(100);
  doc.text('Generated by Anar Profit Calculator - Professional Pomegranate Trading Solution', 20, pageHeight - 20);
  
  // Save the PDF
  const fileName = `anar-calculation-${calculation.tripId || Date.now()}.pdf`;
  doc.save(fileName);
};